local pallet_cache = {}
local generator_cache = {}

function find_parts_recursively(parent, model_name_check, part_name, class_name, cache_table)
    if not parent or not parent:Children() then
        return
    end

    for _, child in ipairs(parent:Children()) do
        if child then
            if child:ClassName() == "Model" and model_name_check(child:Name()) then
                local part = child:FindChild(part_name)
                if part and part:ClassName() == class_name then
                    table.insert(cache_table, {part = part, model = child})
                end
            end
            
            if #child:Children() > 0 then
                find_parts_recursively(child, model_name_check, part_name, class_name, cache_table)
            end
        end
    end
end

function update_pallet_cache()
    pallet_cache = {}
    local mapFolder = globals.workspace():FindChild("Map")
    if not mapFolder then 
        return 
    end
    
    find_parts_recursively(mapFolder, function(name) return name == "Palletwrong" or name == "palletalien" end, "Primary1", "MeshPart", pallet_cache)
end

function update_generator_cache()
    generator_cache = {}
    local mapFolder = globals.workspace():FindChild("Map")
    if not mapFolder then return end

    find_parts_recursively(mapFolder, function(name) return name == "Generator" end, "defaultMaterial", "MeshPart", generator_cache)
end

local options = {
    pallet_enabled = ui.new_checkbox("Enable Pallet ESP"),
    pallet_color = ui.colorpicker("Pallet ESP Color", 1.0, 1.0, 0.0, 1.0),
    pallet_thickness = ui.slider_float("Pallet Line Thickness", 1.0, 1.0, 5.0, "%.1f"),
    pallet_distance = ui.slider_int("Pallet Max Distance", 500, 50, 2000, "%d"),

    separator1 = ui.label(""),

    gen_enabled = ui.new_checkbox("Enable Generator ESP"),
    gen_color = ui.colorpicker("Generator ESP Color", 1.0, 0.5, 0.0, 1.0),
    gen_thickness = ui.slider_float("Generator Line Thickness", 1.0, 1.0, 5.0, "%.1f"),
    gen_distance = ui.slider_int("Generator Max Distance", 500, 50, 2000, "%d"),

    separator2 = ui.label(""),

    show_distance = ui.new_checkbox("Show Distance"),
    precise_mode = ui.new_checkbox("Precise Mode", true),
    debug_mode = ui.new_checkbox("Debug Mode")
}

function get_precise_model_bounds(model)
    if not model or not model:Children() then
        return nil
    end
    
    local min_x, max_x = math.huge, -math.huge
    local min_y, max_y = math.huge, -math.huge
    local min_z, max_z = math.huge, -math.huge
    
    local found_parts = false
    
    local function scan_parts(parent)
        if not parent or not parent:Children() then return end
        
        for _, child in ipairs(parent:Children()) do
            if child:ClassName() == "Part" or child:ClassName() == "MeshPart" or child:ClassName() == "UnionOperation" then
                local primitive = child:Primitive()
                if primitive then
                    local pos = primitive:GetPartPosition()
                    if pos then
                        local size_offset = 0.5
                        
                        min_x = math.min(min_x, pos.x - size_offset)
                        max_x = math.max(max_x, pos.x + size_offset)
                        min_y = math.min(min_y, pos.y - size_offset)
                        max_y = math.max(max_y, pos.y + size_offset)
                        min_z = math.min(min_z, pos.z - size_offset)
                        max_z = math.max(max_z, pos.z + size_offset)
                        
                        found_parts = true
                    end
                end
            end
            
            scan_parts(child)
        end
    end
    
    scan_parts(model)
    
    if not found_parts then
        return nil
    end
    
    local center = Vector3(
        (min_x + max_x) / 2,
        (min_y + max_y) / 2,
        (min_z + max_z) / 2
    )
    
    local size = {
        x = math.max(1, max_x - min_x),
        y = math.max(1, max_y - min_y),
        z = math.max(1, max_z - min_z)
    }
    
    return {
        center = center,
        size = size,
        bounds = {
            min = Vector3(min_x, min_y, min_z),
            max = Vector3(max_x, max_y, max_z)
        }
    }
end

function get_object_dimensions(object_type, model_name)
    if object_type == "Pallet" then
        if model_name == "Palletwrong" then
            return {x = 4.8, y = 6.2, z = 1.2}
        elseif model_name == "palletalien" then
            return {x = 5.2, y = 6.8, z = 1.4}
        else
            return {x = 5.0, y = 6.5, z = 1.3}
        end
    elseif object_type == "Generator" then
        return {x = 7.5, y = 5.0, z = 4.5}
    end
    
    return {x = 4, y = 4, z = 4} -- Fallback
end

function get_distance_to_player(position)
    local player = globals.localplayer()
    if not player then return math.huge end
    
    local character = player:ModelInstance()
    if not character then return math.huge end
    
    local humanoidRootPart = character:FindChild("HumanoidRootPart")
    if not humanoidRootPart then return math.huge end
    
    local playerPos = humanoidRootPart:Primitive():GetPartPosition()
    if not playerPos then return math.huge end
    
    local dx = position.x - playerPos.x
    local dy = position.y - playerPos.y
    local dz = position.z - playerPos.z
    
    return math.sqrt(dx*dx + dy*dy + dz*dz)
end

function draw_precise_3d_box(cache_item, r, g, b, a, thickness, object_type, max_distance)
    local part = cache_item.part
    local model = cache_item.model
    
    if not part or not part.Parent or not model then return end
    
    local bbox_info
    local model_name = model:Name()
    
    if options.precise_mode:get() then
        bbox_info = get_precise_model_bounds(model)
        
        if not bbox_info then
            local primitive = part:Primitive()
            if not primitive then return end
            local position = primitive:GetPartPosition()
            if not position then return end
            
            local size = get_object_dimensions(object_type, model_name)
            bbox_info = {
                center = position,
                size = size
            }
        end
    else
        local primitive = part:Primitive()
        if not primitive then return end
        
        local position = primitive:GetPartPosition()
        if not position then return end
        
        local size = get_object_dimensions(object_type, model_name)
        
        if object_type == "Pallet" then
            position = Vector3(position.x, position.y - 0.5, position.z)
        end
        
        bbox_info = {
            center = position,
            size = size
        }
    end
    
    if not bbox_info then return end
    
    local distance = get_distance_to_player(bbox_info.center)
    if distance > max_distance then return end
    
    local half_width = bbox_info.size.x / 2
    local half_height = bbox_info.size.y / 2
    local half_depth = bbox_info.size.z / 2
    
    local corners_world = {
        Vector3(bbox_info.center.x + half_width, bbox_info.center.y + half_height, bbox_info.center.z + half_depth),
        Vector3(bbox_info.center.x + half_width, bbox_info.center.y + half_height, bbox_info.center.z - half_depth),
        Vector3(bbox_info.center.x + half_width, bbox_info.center.y - half_height, bbox_info.center.z + half_depth),
        Vector3(bbox_info.center.x + half_width, bbox_info.center.y - half_height, bbox_info.center.z - half_depth),
        Vector3(bbox_info.center.x - half_width, bbox_info.center.y + half_height, bbox_info.center.z + half_depth),
        Vector3(bbox_info.center.x - half_width, bbox_info.center.y + half_height, bbox_info.center.z - half_depth),
        Vector3(bbox_info.center.x - half_width, bbox_info.center.y - half_height, bbox_info.center.z + half_depth),
        Vector3(bbox_info.center.x - half_width, bbox_info.center.y - half_height, bbox_info.center.z - half_depth)
    }

    local screen_points = {}
    local visible_count = 0
    for i = 1, #corners_world do
        local screen_pos = utils.world_to_screen(corners_world[i])
        if screen_pos and screen_pos.x and screen_pos.y then
            screen_points[i] = screen_pos
            visible_count = visible_count + 1
        else
            screen_points[i] = nil
        end
    end

    if visible_count == 0 then return end

    local adaptive_thickness = thickness
    if distance > 100 then
        adaptive_thickness = math.max(0.5, thickness * (100 / distance))
    end

    local edges = { 
        {1, 2}, {1, 3}, {1, 5}, {2, 4}, {2, 6}, 
        {3, 4}, {3, 7}, {4, 8}, {5, 6}, {5, 7}, 
        {6, 8}, {7, 8} 
    }

    for _, edge in ipairs(edges) do
        local p1 = screen_points[edge[1]]
        local p2 = screen_points[edge[2]]
        if p1 and p2 then
            render.line(p1.x, p1.y, p2.x, p2.y, r, g, b, a, adaptive_thickness)
        end
    end
    
    local min_x, max_x, top_y = math.huge, -math.huge, math.huge
    local text_pos_found = false
    for _, pos in pairs(screen_points) do
        if pos then
            min_x = math.min(min_x, pos.x)
            max_x = math.max(max_x, pos.x)
            top_y = math.min(top_y, pos.y)
            text_pos_found = true
        end
    end

    if text_pos_found then
        local display_text = object_type
        if options.show_distance:get() then
            display_text = object_type .. " [" .. math.floor(distance) .. "m]"
        end
        
        if options.debug_mode:get() then
            display_text = display_text .. " (" .. model_name .. ")"
        end
        
        local textSize = render.measure_text(display_text, 0)
        local center_x = min_x + (max_x - min_x) / 2
        
        local text_alpha = math.max(100, 255 - (distance / max_distance) * 155)
        
        render.text(center_x - textSize.x / 2, top_y - textSize.y - 5, display_text, 
                   255, 255, 255, text_alpha, 'o', 0)
    end
end

cheat.set_callback("paint", function()
    if options.pallet_enabled:get() and #pallet_cache > 0 then
        local color = options.pallet_color:get()
        local r, g, b, a = math.floor(color.r * 255), math.floor(color.g * 255), math.floor(color.b * 255), math.floor(color.a * 255)
        local max_distance = options.pallet_distance:get()
        for _, cache_item in ipairs(pallet_cache) do
            draw_precise_3d_box(cache_item, r, g, b, a, options.pallet_thickness:get(), "Pallet", max_distance)
        end
    end

    if options.gen_enabled:get() and #generator_cache > 0 then
        local color = options.gen_color:get()
        local r, g, b, a = math.floor(color.r * 255), math.floor(color.g * 255), math.floor(color.b * 255), math.floor(color.a * 255)
        local max_distance = options.gen_distance:get()
        for _, cache_item in ipairs(generator_cache) do
            draw_precise_3d_box(cache_item, r, g, b, a, options.gen_thickness:get(), "Generator", max_distance)
        end
    end
end)

function update_all_caches()
    update_pallet_cache()
    update_generator_cache()
end

update_all_caches()

cheat.set_callback("update_cache", update_all_caches)
cheat.set_callback("rescan", update_all_caches)
